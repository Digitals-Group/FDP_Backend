generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  INBASKET
  ORDERED
  CANCELED
  PENDING
}

enum Role {
  CLIENT
  ADMIN
  ROOT
}

enum TakeType {
  DELIVERY
  TAKEAWAY
}

enum PaymentType {
  CASH
  CARD
}

model User {
  id String @id @default(uuid())

  Order Order[]
  role Role @default(CLIENT)

  email         String? @unique
  phone         String? @unique
  fullName      String?
  isAllowedCash Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Banner {
  id String @id @default(uuid())

  image String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banners")
}

model ProductCategory {
  id String @id @default(uuid())

  products Product[]

  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_categories")
}

model Product {
  id         String @id @default(uuid())
  categoryId String

  category ProductCategory @relation(fields: [categoryId], references: [id])

  name        String  @unique
  price       Float
  description String?
  image       String?
  discount    Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@map("products")
  OrderItem OrderItem[]
}

model Branch {
  id String @id @default(uuid())

  name         String @unique()
  image        String
  location     String
  workingHours String
  phoneNumber  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("branches")
}

model DeliveryPrice {
  id String @id @default(uuid())

  price Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("deliver_prices")
}

model Order{
  id String @id @default(uuid())
  userId String

  paymentType PaymentType
  takeType TakeType
  status OrderStatus @default(INBASKET)
  user User @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  location String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("orders")
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  productId String

  order Order @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}